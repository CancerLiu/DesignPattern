package com.designpattern.behavioral_pattern.interpreter_pattern;

/**
 * 解释模器模式描述了如何为简单的语言定义一个文法，如何在该语言中表示一个句子，以及如何解释这些句子。
 * 其关键在于如何表示一个语言的文法规则以及如何构造一棵抽象语法树。
 *
 * 解释器模式用于描述如何使用面向对象语言构成一个简单的语言解释器。
 *
 * 在某些情况下，为了更好地描述某些特定类型的问题，可以创建一种新的语言，这种语言拥有自己的表达式和
 * 结构，即文法规则。这些问题的实例将对应为该语言中的句子。此时，可以使用解释器模式来设计这种新的语
 * 言。
 *
 * 因为解释器模式需要解析的语法表达式中包含终结符表达式和非终结符表达式，因此解释器模式的结构和组合
 * 模式的结构有些类似。
 *
 * 解释器模式的四个角色——
 * (1)抽象表达式
 * (2)终结符表达式
 * (3)非终结符表达式——由于在非终结符表达式中可以包含终结符表达式，也可以包含非终结符表达式，因此
 * 其解释操作一般通过递归的方式完成。
 * (4)环境类——用于存储解释器之外的一些全局信息，通常它临时存储了需要解释的语句。
 *
 * 在解释器模式中，每一种终结符和非终结符都有一个具体类与之对抗，正因为使用类来表示每一条文法
 * 规则，所以系统将具有较好的灵活性和可扩展性。
 *
 * 感觉解释器模式的关键在于语法抽象树的分析与建立。
 */
public class BaseCodeForm {
}
